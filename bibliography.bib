% Encoding: UTF-8

%%%
%
%Beim Erstellen der Bibtex-Datei wird empfohlen darauf zu achten, dass die DOI aufgeführt wird.
%
%%%

@inproceedings{Fritzsch_2019,
  doi = {10.1109/icsme.2019.00081},
  url = {https://doi.org/10.1109%2Ficsme.2019.00081},
  year = 2019,
  month = {sep},
  publisher = {{IEEE}},
  author = {Jonas Fritzsch and Justus Bogner and Stefan Wagner and Alfred Zimmermann},
  title = {Microservices Migration in Industry: Intentions, Strategies, and Challenges},
  booktitle = {2019 {IEEE} International Conference on Software Maintenance and Evolution ({ICSME})}
}

@InProceedings{10.1007/978-3-030-06019-0_10,
	author="Fritzsch, Jonas
	and Bogner, Justus
	and Zimmermann, Alfred
	and Wagner, Stefan",
	editor="Bruel, Jean-Michel
	and Mazzara, Manuel
	and Meyer, Bertrand",
	title="From Monolith to Microservices: A Classification of Refactoring Approaches",
	booktitle="Software Engineering Aspects of Continuous Development and New Paradigms of Software Production and Deployment",
	year="2019",
	publisher="Springer International Publishing",
	address="Cham",
	pages="128--141",
	abstract="While the recently emerged Microservices architectural style is widely discussed in literature, it is difficult to find clear guidance on the process of refactoring legacy applications. The importance of the topic is underpinned by high costs and effort of a refactoring process which has several other implications, e.g. overall processes (DevOps) and team structure. Software architects facing this challenge are in need of selecting an appropriate strategy and refactoring technique. One of the most discussed aspects in this context is finding the right service granularity to fully leverage the advantages of a Microservices architecture. This study first discusses the notion of architectural refactoring and subsequently compares 10 existing refactoring approaches recently proposed in academic literature. The approaches are classified by the underlying decomposition technique and visually presented in the form of a decision guide for quick reference. The review yielded a variety of strategies to break down a monolithic application into independent services. With one exception, most approaches are only applicable under certain conditions. Further concerns are the significant amount of input data some approaches require as well as limited or prototypical tool support.",
	isbn="978-3-030-06019-0"
}


@misc{fritzsch2022architecturecentric,
  title={Towards an Architecture-centric Methodology for Migrating to Microservices},
  author={Jonas Fritzsch and Justus Bogner and Markus Haug and Stefan Wagner and Alfred Zimmermann},
  year={2022},
  eprint={2207.00507},
  archivePrefix={arXiv},
  primaryClass={cs.SE}
}

@article{https://doi.org/10.1002/spe.2974,
	author = {Soldani, Jacopo and Muntoni, Giuseppe and Neri, Davide and Brogi, Antonio},
	title = {The μTOSCA toolchain: Mining, analyzing, and refactoring microservice-based architectures},
	journal = {Software: Practice and Experience},
	volume = {51},
	number = {7},
	pages = {1591-1621},
	keywords = {architectural smells, microservices, refactoring, software architecture mining},
	doi = {https://doi.org/10.1002/spe.2974},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.2974},
	eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.2974},
	abstract = {Summary Exploiting microservices to architect enterprise applications is becoming commonplace. This makes it crucial to provide some support for designing and analyzing microservice-based applications, for example, for understanding whether a microservice-based application adheres to the main design principles of microservices and for choosing how to refactor it when this is not the case. To provide such support, in this article we present the TOSCA toolchain. More precisely, we first introduce the TOSCA model to represent the architecture of microservice-based applications with the OASIS standard TOSCA. We then describe a technique to automatically mine the architecture of a microservice-based application and represent it with TOSCA, given the Kubernetes deployment of the application. We also present a methodology to analyze the TOSCA representation of a microservice-based architecture to systematically identify the architectural smells potentially affecting the corresponding application and to resolve them. Finally, we present two prototype tools, Miner and Freshener, implementing our mining solution and the support for identifying and resolving architectural smells in microservice-based applications, respectively. We then assess —by discussing some case studies— how effectively Miner, Freshener, and the TOSCA toolchain can support researchers and practitioners working with microservices.},
	year = {2021}
}

@Misc{master-daniel-koch,
  author      = {Daniel Koch},
  title       = {Migrating Monolithic Architecturesto Microservices: A Study onSoftware Quality Attributes},
  doi         = {10.18419/opus-12676},
  institution = {Institute of Software Engineering, University of Stuttgart},
  year        = {2022},
}

@Misc{master-tobias-haller,
  author      = {Tobias Haller},
  date        = {2022},
  title       = {Design, Implementation and Evaluation of an Application for Guiding Architectural Refactoring to Microservices},
  doi         = {10.18419/opus-12272},
  institution = {Institute of Software Engineering, University of Stuttgart},
}

@Misc{master-marvin-knodel,
	author      = {Marvin Knodel},
	date        = {2023},
	title       = {Migration monolithischer Anwendungen in Microservices-basierte Architekturen: Fallstudie einer Service/Sales-Applikation},
	doi         = {10.18419/opus-13687},
	institution = {Institute of Software Engineering, University of Stuttgart},
}

@Misc{arh-github,
  author = {Jonas Fritzsch and Tobias Haller and Daniel Koch},
  date   = {2022},
  title  = {GitHub repository of the Architecture Refactoring Helper},
  url    = {https://github.com/jfr609/architecture-refactoring-helper},
}

@ARTICLE{a-survey-on,
  author={Velepucha, Victor and Flores, Pamela},
  journal={IEEE Access},
  title={A Survey on Microservices Architecture: Principles, Patterns and Migration Challenges},
  year={2023},
  volume={11},
  number={},
  pages={88339-88358},
  abstract={Microservices architecture is a new trend embraced by many organizations as a way to modernize their legacy applications. However, although there is work related to the migration process, there is a gap in the body of knowledge related to the principles they should adopt when implementing a microservices architecture. This work presents a comprehensive survey, gathering literature that explores the fundamental principles underlying the object-oriented approach and how these concepts are related to monolithic and microservices architectures. In addition, our research encompasses both monolithic architectures and microservices, along with an investigation into the design patterns and principles utilized within microservices. Our contribution is present a list of patterns used in microservices architecture, the comparation between the principles expounded by the experts in the decomposition of microservices architectures, Martin Fowler and Sam Neuman, and the forerunner of the Principle of Information Hiding, David Parnas, who discusses modularization as a mechanism to improve flexibility and understanding of a system. Additionally, we expose the advantages and disadvantages of monolithic and microservices architectures obtained from the literature review carried out in summary form, which can help as a reference for researchers from academia and industry and finally reveal the trends of microservices architectures today.},
  keywords={},
  doi={10.1109/ACCESS.2023.3305687},
  ISSN={2169-3536},
  month={},
}

@article{SVAHNBERG20071893,
  title = {Six years of evaluating software architectures in student projects},
  journal = {Journal of Systems and Software},
  volume = {80},
  number = {11},
  pages = {1893-1901},
  year = {2007},
  issn = {0164-1212},
  doi = {https://doi.org/10.1016/j.jss.2007.01.050},
  url = {https://www.sciencedirect.com/science/article/pii/S016412120700060X},
  author = {Mikael Svahnberg and Frans Mårtensson},
  keywords = {Software architecture, Software architecture evaluation, Education},
  abstract = {Software architecture evaluations are an important decision support tool when developing software systems. It is thus important that they are conducted professionally and that the results are of high quality. In order to improve the quality, it is necessary for the participants to gain experience in conducting software architecture evaluations. In this article we present guidelines based on six years of experience in software architecture evaluations. Although we primarily focus on our experiences on software architecture evaluation in student projects, we have also applied the same method in industry with similar experiences.}
}

@techreport{kazman_2000,
  author={Kazman, Rick and Klein, Mark and Clements, Paul},
  title={ATAM: Method for Architecture Evaluation},
  month={Aug},
  year={2000},
  number={CMU/SEI-2000-TR-004},
  howpublished={Carnegie Mellon University, Software Engineering Institute's Digital Library},
  url={https://insights.sei.cmu.edu/library/atam-method-for-architecture-evaluation/},
  note={Accessed: 2023-Oct-16}
}

@Book{saam,
  author    = {Len Bass and Paul Clements and Rick Kazman},
  date      = {1998},
  title     = {Software architecture in practice},
  publisher = {Addison-Wesley Publishing Co.},
}

@Inbook{seaman2008qualitative,
	author="Seaman, Carolyn B.",
	editor="Shull, Forrest
	and Singer, Janice
	and Sj{\o}berg, Dag I. K.",
	title="Qualitative Methods",
	bookTitle="Guide to Advanced Empirical Software Engineering",
	year="2008",
	publisher="Springer London",
	address="London",
	pages="35--62",
	abstract="Software engineering involves a blend of non-technical as well as technical issues that often have to be taken into account in the design of empirical studies. In particular, the behavior of people is an integral part of software development and maintenance. This aspect of our subject presents complexities and challenges for the empirical researcher. In many other disciplines, qualitative research methods have been developed and are commonly used to handle the complexity of issues involving people performing tasks in their workplace. This chapter presents several qualitative methods for data collection and analysis and describes them in terms of how they might be incorporated into empirical studies of software engineering, in particular how they might be combined with quantitative methods. To illustrate this use of qualitative methods, examples from real software engineering studies are used throughout.",
	isbn="978-1-84800-044-5",
	doi="10.1007/978-1-84800-044-5_2",
	url="https://doi.org/10.1007/978-1-84800-044-5_2"
}



@INPROCEEDINGS{Fil2023,
  author={Filippone, Gianluca and Qaisar Mehmood, Nadeem and Autili, Marco and Rossi, Fabrizio and Tivoli, Massimo},
  booktitle={2023 IEEE 20th International Conference on Software Architecture (ICSA)},
  title={From monolithic to microservice architecture: an automated approach based on graph clustering and combinatorial optimization},
  year={2023},
  volume={},
  number={},
  pages={47-57},
  doi={10.1109/ICSA56044.2023.00013}
}

@INPROCEEDINGS{PF4MD,
	author={Li, Yulong and Li, Zhi and Bu, Yitao and Xiao, Hongbin and Deng, Yajun},
	booktitle={2023 IEEE 31st International Requirements Engineering Conference (RE)},
	title={PF4MD: A Microservice Decomposition Tool Combining Problem Frames},
	year={2023},
	volume={},
	number={},
	pages={359-360},
	doi={10.1109/RE57278.2023.00051}
}

@book{problem-frames,
	month = {December},
	title = {Problem Frames: Analysing and Structuring Software Development Problems},
	author = {Michael Jackson},
	address = {New York},
	publisher = {Addison-Wesley},
	year = {2001},
	url = {https://oro.open.ac.uk/7513/},
	abstract = {It is tempting when approaching a software development problem to rush headlong into the trap of thinking too soon about the solution. Software development problems are about the world outside the computer {--} the real environment in which the system must have its effect {--} and demand consideration of the surrounding characteristics, relationships and context. Problem frames are a tool for classifying, analyzing and structuring such software development problems. Whereas object oriented patterns are primarily concerned with solutions, problem frames focus on the problem itself, enabling you to understand and address it clearly and directly.}
}

@Inbook{Dragoni2017,
	author="Dragoni, Nicola
	and Giallorenzo, Saverio
	and Lafuente, Alberto Lluch
	and Mazzara, Manuel
	and Montesi, Fabrizio
	and Mustafin, Ruslan
	and Safina, Larisa",
	editor="Mazzara, Manuel
	and Meyer, Bertrand",
	title="Microservices: Yesterday, Today, and Tomorrow",
	bookTitle="Present and Ulterior Software Engineering",
	year="2017",
	publisher="Springer International Publishing",
	address="Cham",
	pages="195--216",
	abstract="Microservices is an architectural style inspired by service-oriented computing that has recently started gaining popularity. Before presenting the current state of the art in the field, this chapter reviews the history of software architecture, the reasons that led to the diffusion of objects and services first, and microservices later. Finally, open problems and future challenges are introduced. This survey primarily addresses newcomers to the discipline, while offering an academic viewpoint on the topic. In addition, we investigate some practical issues and point out a few potential solutions.",
	isbn="978-3-319-67425-4",
	doi="10.1007/978-3-319-67425-4_12",
	url="https://doi.org/10.1007/978-3-319-67425-4_12"
}

@ARTICLE{7742218,
	author={Singleton, Andy},
	journal={IEEE Cloud Computing},
	title={The Economics of Microservices},
	year={2016},
	volume={3},
	number={5},
	pages={16-20},
	doi={10.1109/MCC.2016.109}
}

@misc{taibi2019decomposition,
	title={A Decomposition and Metric-Based Evaluation Framework for Microservices},
	author={Davide Taibi and Kari Systä},
	year={2019},
	eprint={1908.08513},
	archivePrefix={arXiv},
	primaryClass={cs.SE}
}

@Article{taibi2019monolithic,
  author    = {Taibi, Davide and Syst{\"a}, Kari},
  title     = {From monolithic systems to microservices: A decomposition framework based on process mining},
  doi       = {10.5220/0007755901530164},
  publisher = {SciTePress},
  year      = {2019},
}

@ARTICLE{taibi2017processmotivations,
	author={Taibi, Davide and Lenarduzzi, Valentina and Pahl, Claus},
	journal={IEEE Cloud Computing},
	title={Processes, Motivations, and Issues for Migrating to Microservices Architectures: An Empirical Investigation},
	year={2017},
	volume={4},
	number={5},
	pages={22-32},
	doi={10.1109/MCC.2017.4250931}
}

@inproceedings{on-a-metaprocess,
	author = {Medeiros, Henrique and Batista, Thais and Cavalcante, Everton},
	title = {On a Metaprocess for Microservice Migration},
	year = {2023},
	isbn = {9798400707872},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3613372.3613382},
	doi = {10.1145/3613372.3613382},
	abstract = {Microservice-based architectures have become popular to manage the complexity of many cloud service-oriented systems and comply with availability, maintainability, and scalability requirements. Modernizing legacy systems to adopt microservices is time-consuming and has often been ad-hoc. One of the main issues is the lack of an understanding of which activities and artifacts should be considered when migrating applications to microservices, besides how to realize a well-defined process to achieve the expected benefits. This paper introduces the Metaprocess for Microservice Migration Kernel (M3K) to support migrating monolithic applications to microservice architectures. The core idea is defining a general-purpose metaprocess that development teams and organizations could use as a basis for defining their specific microservice migration processes. M3K relies on OMG Essence Standard as a well-founded common ground for establishing software development practices, activities, and work products and tracking the migration to microservices.},
	booktitle = {Proceedings of the XXXVII Brazilian Symposium on Software Engineering},
	pages = {116–121},
	numpages = {6},
	keywords = {migration, software modernization, legacy systems, Microservices, metaprocess},
	location = {Campo Grande, Brazil},
	series = {SBES '23}
}

@INPROCEEDINGS{muP-a-dev-framework,
	author={Garbi, Giulio and Incerto, Emilio and Tribastone, Mirco},
	booktitle={2023 IEEE 16th International Conference on Cloud Computing (CLOUD)},
	title={μP: A Development Framework for Predicting Performance of Microservices by Design},
	year={2023},
	volume={},
	number={},
	pages={178-188},
	doi={10.1109/CLOUD60044.2023.00029}
}

@Misc{essence-kernel-omg,
  author       = {OMG},
  date         = {2018},
  title        = {Essence – Kernel and Language for Software Engineering Methods, Version 1.2},
  organization = {OMG, USA},
  url          = {https://www.omg.org/spec/Essence/1.2/About-Essence},
}

@article{software-architectural-migration-2021,
	author = {Chondamrongkul, Nacha and Sun, Jing and Warren, Ian},
	title = {Software Architectural Migration: An Automated Planning Approach},
	year = {2021},
	issue_date = {October 2021},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {30},
	number = {4},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/3461011},
	doi = {10.1145/3461011},
	abstract = {Software architectural designs are usually changed over time to support emerging technologies and to adhere to new principles. Architectural migration is an important activity that helps to transform the architectural styles applied during a system’s design with the result of modernising the system. If not performed correctly, this process could lead to potential system failures. This article presents an automated approach to refactoring architectural design and to planning the evolution process. With our solution, the architectural design can be refactored, ensuring that system functionality is preserved. Furthermore, the architectural migration process allows the system to be safely and incrementally transformed. We have evaluated our approach with five real-world software applications. The results prove the effectiveness of our approach and identify factors that impact the performance of architectural verification and migration planning. An interesting finding is that planning algorithms generate migration plans that differ in term of their relative efficiency.},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	month = {jul},
	articleno = {50},
	numpages = {35},
	keywords = {architectural migration, Blockchain, microservice, software modernisation, Software architecture}
}

@INPROCEEDINGS{architect:a-framework,
	author={Volynsky, Evgeny and Mehmed, Merlin and Krusche, Stephan},
	booktitle={2022 International Conference on Computing, Electronics \& Communications Engineering (iCCECE)},
	title={Architect: A Framework for the Migration to Microservices},
	year={2022},
	volume={},
	number={},
	pages={71-76},
	doi={10.1109/iCCECE55162.2022.9875096}
}

@TechReport{ISO-9126,
  author = {{International Organization for Standardization/International Electrotechnical Commission}},
  date   = {2000},
  title  = {ISO/IEC FDIS 9126-1:2000(E), Software engineering - Product quality - Part 1: Quality model},
  type   = {Standard},
}

@TechReport{ISO-25010,
  author = {{International Organization for Standardization/International Electrotechnical Commission}},
  date   = {2011},
  title  = {ISO/IEC 25010:2011, Systems and software engineering - Systems and software Quality Requirements and Evaluation (SQuaRE) - System and software quality models},
  type   = {Standard},
}


% ARH results

@Article{arh-result-no-filter-1,
  author    = {Habibullah, Safa and Liu, Xiaodong and Tan, Zhiyuan},
  title     = {An approach to evolving legacy enterprise system to microservice-based ar\-chi\-tecture through feature-driven evolution rules},
  doi       = {10.7763/IJCTE.2018.V10.1219},
  number    = {5},
  pages     = {164-169},
  volume    = {10},
  journal   = {International Journal of Computer Theory and Engineering},
  publisher = {IACSIT Press},
  year      = {2018},
}

@ARTICLE{arh-result-no-filter-2,
	author={Vera-Rivera, Fredy H. and Puerto, Eduard and Astudillo, Hernán and Gaona, Carlos Mauricio},
	journal={IEEE Access},
	title={Microservices Backlog–A Genetic Programming Technique for I\-den\-ti\-fi\-ca\-tion and Evaluation of Microservices From User Stories},
	year={2021},
	volume={9},
	number={},
	pages={117178-117203},
	doi={10.1109/ACCESS.2021.3106342}
}

@article{arh-result-no-filter-3,
	title = {A multi-model based microservices identification approach},
	journal = {Journal of Systems Architecture},
	volume = {118},
	pages = {102200},
	year = {2021},
	issn = {1383-7621},
	doi = {https://doi.org/10.1016/j.sysarc.2021.102200},
	url = {https://www.sciencedirect.com/science/article/pii/S1383762121001442},
	author = {Mohamed Daoud and Asmae {El Mezouari} and Noura Faci and Djamal Benslimane and Zakaria Maamar and Aziz {El Fazziki}},
	keywords = {Business process, Control/Data/Semantic dependency, Clustering, Microservice},
	abstract = {Microservices are hailed for their capabilities to tackle the challenge of breaking monolithic business systems down into small, cohesive, and loosely-coupled services. Indeed, these systems are neither easy to maintain nor to replace undermining organizations’ efforts to cope with user’s changing needs and governments’ complex regulations. Microservices constitute an architectural style for developing a new generation of systems as a suite of services that, although they are separate, engage in collaborative execution and communication sessions. However, microservices success depends, among many other things, on the existence of an approach that would automatically identify the necessary microservices according to organizations’ requirements. In this paper, we present such an approach and demonstrate its technical doability in the context of a case study, Bicing, for renting bikes. Some salient features of this approach are business processes as input for the identification needs, three models known as control, data, and semantic to capture dependencies between these processes’ activities, and, finally, a collaborative clustering technique that recommends potential microservices. Conducted experiments in the context of Bicing clearly indicate that our approach outperforms similar ones for microservices identification and reinforce the important role of business processes in this identification. The approach constitutes a major milestone towards a better architectural style for future microservices systems.}
}

@inproceedings{arh-result-no-filter-4,
	author = {Freitas, Francisco and Ferreira, Andr\'{e} and Cunha, J\'{a}come},
	title = {Refactoring Java Monoliths into Executable Microservice-Based Ap\-pli\-ca\-tions},
	year = {2021},
	isbn = {9781450390620},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3475061.3475086},
	doi = {10.1145/3475061.3475086},
	abstract = {In the last few years we have been seeing a drastic change in the way software is developed. Large-scale software projects are being assembled by a flexible composition of many (small) components possibly written in different programming languages and deployed anywhere in the cloud – the so-called microservice-based applications. The dramatic growth in popularity of microservice-based applications has pushed several companies to apply major refactorings to their software systems. However, this is a challenging task that may take several months or even years. We propose a methodology to automatically evolve a Java monolithic application into a microservice-based one. Our methodology receives the Java code and a proposition of microservices and refactors the original classes to make each microservice independent. Our methodology creates an API for each method call to classes that are in other services. The database entities are also refactored to be included in the corresponding service. The initial evaluation shows that our tool can successfully refactor 80\% of the applications tested.},
	booktitle = {Proceedings of the 25th Brazilian Symposium on Programming Languages},
	pages = {100–107},
	numpages = {8},
	keywords = {microservice-based applications, microservice architecture, monolithic decomposition, Java, refactoring},
	location = {Joinville, Brazil},
	series = {SBLP '21}
}

@InProceedings{arh-result-no-filter-5,
	author    = {Matias, Tiago and Correia, Filipe F. and Fritzsch, Jonas and Bogner, Justus and Ferreira, Hugo S. and Restivo, Andr{\'e}},
	booktitle = {Software Architecture},
	title     = {Determining Microservice Boundaries: A Case Study Using Static and Dy\-na\-mic Software Analysis},
	doi       = {10.1007/978-3-030-58923-3_21},
	editor    = {Jansen, Anton and Malavolta, Ivano and Muccini, Henry and Ozkaya, Ipek and Zimmermann, Olaf},
	isbn      = {978-3-030-58923-3},
	pages     = {315--332},
	publisher = {Springer International Publishing},
	abstract  = {A number of approaches have been proposed to identify service boundaries when decomposing a monolith to microservices. However, only a few use systematic methods and have been demonstrated with replicable empirical studies. We describe a systematic approach for refactoring systems to microservice architectures that uses static analysis to determine the system's structure and dynamic analysis to understand its actual behavior. A prototype of a tool was built using this approach (MonoBreaker) and was used to conduct a case study on a real-world software project. The goal was to assess the feasibility and benefits of a systematic approach to decomposition that combines static and dynamic analysis. The three study participants regarded as positive the decomposition proposed by our tool, and considered that it showed improvements over approaches that rely only on static analysis.},
	address   = {Cham},
	year      = {2020},
}

@InProceedings{arh-result-important-filter-4,
	author="De Alwis, Adambarage Anuruddha Chathuranga
	and Barros, Alistair
	and Fidge, Colin
	and Polyvyanyy, Artem",
	editor="La Rosa, Marcello
	and Sadiq, Shazia
	and Teniente, Ernest",
	title="Microservice Remodularisation of Monolithic Enterprise Systems for Embedding in Industrial IoT Networks",
	booktitle="Advanced Information Systems Engineering",
	year="2021",
	publisher="Springer International Publishing",
	address="Cham",
	pages="432--448",
	abstract="This paper addresses the challenge of decoupling ``back-office'' enterprise system functions in order to integrate them with the Industrial Internet-of-Things (IIoT). IIoT is a widely anticipated strategy, combining IoT technologies managing physical object movements, interactions and contexts, with business contexts. However, enterprise systems, supporting these contexts, are notoriously large and monolithic, and coordinate centralised business processes through software components dedicated to managing business objects (BOs). Such objects and their associated operations are difficult to manually decouple because of the asynchronous and user-driven nature of the business processes and complex BO dependencies, such as many-to-many and aggregation relationships. Here we present a software remodularisation technique for enterprise systems, to support the discovery of fine-grained microservices, which can be extracted and embedded to run on IIoT network nodes. It combines the semantic knowledge of enterprise systems, i.e., the BO structure, with syntactic knowledge of the code, i.e., various dependencies at the level of classes and methods. Using extracted feature sets based on both semantic and syntactic dependencies, K-Means clustering and optimisation is then used to recommend microservices, i.e., redistributions of BO operations through microservices from BO-centric components of enterprise systems. The approach is validated using the Dolibarr open source ERP system, in which we identify processes comprising both ``edge'' operations and request-response calls to the Cloud-based enterprise system. Through experimentation using Amazon GreenGrass deployments, simulating IIoT nodes, we show that the recommended microservices demonstrate key non-functional characteristics, of high execution efficiency, scalability and availability.",
	isbn="978-3-030-79382-1"
}


@Article{arh-result-important-filter-7,
	author={Assun{\c{c}}{\~a}o, Wesley K. G.
	and Colanzi, Thelma Elita
	and Carvalho, Luiz
	and Garcia, Alessandro
	and Pereira, Juliana Alves
	and de Lima, Maria Julia
	and Lucena, Carlos},
	title={Analysis of a many-objective optimization approach for identifying microservices from legacy systems},
	journal={Empirical Software Engineering},
	year={2022},
	month={Feb},
	day={01},
	volume={27},
	number={2},
	pages={51},
	abstract={The expensive maintenance of legacy systems leads companies to migrate such systems to modern architectures. Microservice architectural style has become a trend to modernize monolithic legacy systems. A microservice architecture consists of small, autonomous, and highly-independent services communicating by using lightweight network protocols. To support the designing of microservice architectures, recent studies have proposed either single or multi-objective approaches. In order to improve the effectiveness of existing approaches, we introduced toMicroservices that is a many-objective search-based approach to aid the identification of boundaries among services. In previous studies, we have focused on a qualitative evaluation of the applicability and adoption of the proposed approach from a practical point of view, thus the optimization process itself has not been investigated in depth. In this paper, we extend our previous work by performing a more in-depth analysis of our many-objective approach for microservice identification. We compare our approach against a baseline approach based on a random search using a set of performance indicators widely used in the literature of many-objective optimization. Our results are validated through a real-world case study. The study findings reveal that (i) the criteria optimized by our approach are interdependent and conflicting; and (ii) all candidate solutions lead to better performance indicators in comparison to random search. Overall, the proposed many-objective approach for microservice identification yields promising results, which shed light on insights for further improvements.},
	issn={1573-7616},
	doi={10.1007/s10664-021-10049-7},
	url={https://doi.org/10.1007/s10664-021-10049-7}
}

@INPROCEEDINGS{arh-result-no-qas,
	author={Selmadji, Anfel and Seriai, Abdelhak-Djamel and Bouziane, Hinde Lilia and Oumarou Mahamane, Rahina and Zaragoza, Pascal and Dony, Christophe},
	booktitle={2020 IEEE International Conference on Software Architecture (ICSA)}, 
	title={From Monolithic Architecture Style to Microservice one Based on a Semi-Automatic Approach}, 
	year={2020},
	volume={},
	number={},
	pages={157-168},
	keywords={Measurement;Computer architecture;Software;Business;Semantics;Couplings;Databases;Object-Oriented;microservices;software migration;identification;architect recommendations;software architecture;quality.},
	doi={10.1109/ICSA47634.2020.00023}
}


@book{koch-scalability-1,
	title={Software Architecture in Practice: Software Architect Practice\_c3},
	author={Bass, Len and Clements, Paul and Kazman, Rick},
	year={2012},
	publisher={Addison-Wesley}
}

@article{koch-scalability-2,
	title = {Understanding and addressing quality attributes of microservices architecture: A Systematic literature review},
	journal = {Information and Software Technology},
	volume = {131},
	pages = {106449},
	year = {2021},
	issn = {0950-5849},
	doi = {https://doi.org/10.1016/j.infsof.2020.106449},
	url = {https://www.sciencedirect.com/science/article/pii/S0950584920301993},
	author = {Shanshan Li and He Zhang and Zijia Jia and Chenxing Zhong and Cheng Zhang and Zhihao Shan and Jinfeng Shen and Muhammad Ali Babar},
	keywords = {Microservices, Monolith, Quality attributes, Systematic literature review},
	abstract = {Context: As a rapidly adopted architectural style in software engineering, Microservices Architecture (MSA) advocates implementing small-scale and independently distributed services, rather than binding all functions into one monolith. Although many initiatives have contributed to the quality improvement of microservices-based systems, there is still a lack of a systematic understanding of the Quality Attributes (QAs) associated with MSA. Objective: This study aims to investigate the evidence-based state-of-the-art of QAs of microservices-based systems. Method: We carried out a Systematic Literature Review (SLR) to identify and synthesize the relevant studies that report evidence related to QAs of MSA. Results: Based on the data extracted from the 72 selected primary studies, we portray an overview of the six identified QAs most concerned in MSA, scalability, performance, availability, monitorability, security, and testability. We identify 19 tactics that architecturally address the critical QAs in MSA, including two tactics for scalability, four for performance, four for availability, four for monitorability, three for security, and two for testability. Conclusion: This SLR concludes that for MSA-based systems: 1) Although scalability is the commonly acknowledged benefit of MSA, it is still an indispensable concern among the identified QAs, especially when trading-off with other QAs, e.g., performance. Apart from the six identified QAs in this study, other QAs for MSA like maintainability need more attention for effective improvement and evaluation in the future. 3) Practitioners need to carefully make the decision of migrating to MSA based on the return on investment, since this architectural style additionally cause some pains in practice.}
}

@article{koch-time-behavior-1,
	title = {From monolithic systems to Microservices: An assessment framework},
	journal = {Information and Software Technology},
	volume = {137},
	pages = {106600},
	year = {2021},
	issn = {0950-5849},
	doi = {https://doi.org/10.1016/j.infsof.2021.106600},
	url = {https://www.sciencedirect.com/science/article/pii/S0950584921000793},
	author = {Florian Auer and Valentina Lenarduzzi and Michael Felderer and Davide Taibi},
	keywords = {Microservices, Cloud migration, Software measurement},
	abstract = {Context:
	Re-architecting monolithic systems with Microservices-based architecture is a common trend. Various companies are migrating to Microservices for different reasons. However, making such an important decision like re-architecting an entire system must be based on real facts and not only on gut feelings.
	Objective:
	The goal of this work is to propose an evidence-based decision support framework for companies that need to migrate to Microservices, based on the analysis of a set of characteristics and metrics they should collect before re-architecting their monolithic system.
	Method:
	We conducted a survey done in the form of interviews with professionals to derive the assessment framework based on Grounded Theory.
	Results:
	We identified a set consisting of information and metrics that companies can use to decide whether to migrate to Microservices or not. The proposed assessment framework, based on the aforementioned metrics, could be useful for companies if they need to migrate to Microservices and do not want to run the risk of failing to consider some important information.}
}

@article{koch-time-behavior-2,
	title = {A decomposition-based approach for service composition with global QoS guarantees},
	journal = {Information Sciences},
	volume = {199},
	pages = {138-153},
	year = {2012},
	issn = {0020-0255},
	doi = {https://doi.org/10.1016/j.ins.2012.02.061},
	url = {https://www.sciencedirect.com/science/article/pii/S0020025512001892},
	author = {Sherry X. Sun and Jing Zhao},
	keywords = {Service composition, Quality of service, Utility, Service-oriented architecture},
	abstract = {Service-oriented architecture has offered an opportunity to quickly and independently develop new business applications from the existing services. Given that many services are available with the same function but different quality of service (QoS) properties, and service users have different QoS preferences, the challenge of service composition is to select appropriate service candidates to maximize the overall utility while satisfying a user’s requirements. In this paper, we propose a decomposition-based approach for service composition, in which the utility of a composite service can be computed from the utilities of component services and the constraints of component services can be derived from the constraints of the composite service. Thus, with our approach, it is possible to independently manage the selection of each component service, leading to more scalability and more flexibility for service composition in a dynamic environment. The experiment studies show that our approach can achieve a near-optimal solution with a significantly improved performance in computation time.}
}


@Article{koch-deployability,
	AUTHOR = {Milić, Miloš and Makajić-Nikolić, Dragana},
	TITLE = {Development of a Quality-Based Model for Software Architecture Optimization: A Case Study of Monolith and Microservice Architectures},
	JOURNAL = {Symmetry},
	VOLUME = {14},
	YEAR = {2022},
	NUMBER = {9},
	ARTICLE-NUMBER = {1824},
	URL = {https://www.mdpi.com/2073-8994/14/9/1824},
	ISSN = {2073-8994},
	ABSTRACT = {Various architectures can be applied in software design. The aim of this research is to examine a typical implementation of Jakarta EE monolithic and microservice software architectures in the context of software quality attributes. Software quality standards are used to define quality models, as well as quality characteristics and sub-characteristics, i.e., software quality attributes. This paper evaluates monolithic and microservice architectures in the context of Coupling, Testability, Security, Complexity, Deployability, and Availability quality attributes. The performed examinations yielded a quality-based mixed integer goal programming mathematical model for software architecture optimization. The model incorporates various software metrics and considers their maximal, minimal or targeted values, as well as upper and lower deviations. The objective is the sum of all deviations, which should be minimal. Considering the presented model, a solution which incorporated multiple monoliths and microservices was defined. This way, the internal structure of the software is defined in a consistent and symmetrical context, while the external software behavior remains unchanged. In addition, an intersection point of monolithic and microservice software architectures, where software metrics obtain the same values, was introduced. Within the intersection point, either one of the architectures can be applied. With the exception of some metrics, an increase in the number of features leads to a value increase of software metrics in microservice software architecture, whilst these values are constant in monolithic software architecture. An increase in the number of features indicated a quality attribute’s importance for the software system should be examined and an appropriate architecture should be selected accordingly. Finally, practical recommendations regarding software architectures in terms of software quality were given. Since each software system needs to meet non-functional in addition to functional requirements, a quality-driven software engineering can be established.},
	DOI = {10.3390/sym14091824}
}

@INPROCEEDINGS{koch-fault-tolerance,
	author={Alshuqayran, Nuha and Ali, Nour and Evans, Roger},
	booktitle={2016 IEEE 9th International Conference on Service-Oriented Computing and Applications (SOCA)},
	title={A Systematic Mapping Study in Microservice Architecture},
	year={2016},
	volume={},
	number={},
	pages={44-51},
	abstract={The accelerating progress of network speed, reliability and security creates an increasing demand to move software and services from being stored and processed locally on users' machines to being managed by third parties that are accessible through the network. This has created the need to develop new software development methods and software architectural styles that meet these new demands. One such example in software architectural design is the recent emergence of the microservices architecture to address the maintenance and scalability demands of online service providers. As microservice architecture is a new research area, the need for a systematic mapping study is crucial in order to summarise the progress so far and identify the gaps and requirements for future studies. In this paper we present a systematic mapping study of microservices architectures and their implementation. Our study focuses on identifying architectural challenges, the architectural diagrams/views and quality attributes related to microsevice systems.},
	keywords={},
	doi={10.1109/SOCA.2016.15},
	ISSN={},
	month={Nov}
}

@article{hierarchical-agglomerative-algorithm,
	title={Ward’s Hierarchical Agglomerative Clustering Method: Which Algorithms Implement Ward’s Criterion?},
	volume={31},
	ISSN={1432-1343},
	url={http://dx.doi.org/10.1007/s00357-014-9161-z},
	DOI={10.1007/s00357-014-9161-z},
	number={3},
	journal={Journal of Classification},
	publisher={Springer Science and Business Media LLC},
	author={Murtagh, Fionn and Legendre, Pierre},
	year={2014},
	month=oct, pages={274–295}
}

@ARTICLE{NSGA-III,
	author={Deb, Kalyanmoy and Jain, Himanshu},
	journal={IEEE Transactions on Evolutionary Computation}, 
	title={An Evolutionary Many-Objective Optimization Algorithm Using Reference-Point-Based Nondominated Sorting Approach, Part I: Solving Problems With Box Constraints}, 
	year={2014},
	volume={18},
	number={4},
	pages={577-601},
	doi={10.1109/TEVC.2013.2281535}
}

@Article{migration-challanges2023,
	author={Alshammari, Abdullah
	and Almadhor, Ahmad
	and Qasem, Sultan Noman
	and Alkhateeb, Jawad H.
	and Amjad, Kashif},
	title={High-performance computing-enabled probabilistic framework for migration from monolithic to microservices architecture using genetic algorithms},
	journal={Soft Computing},
	year={2023},
	month={Oct},
	day={31},
	abstract={In the wake of advancements in big data, cloud computing, and the Internet of things, software functionalities are constantly evolving to cater to a diverse and growing set of user needs. This rapid pace of data updates and the introduction of new modules can destabilize and imbalance traditional monolithic architectures. Consequently, microservices architecture (MSA), with its independent deployment service capabilities, has been proposed as a solution. MSA offers significant advantages in scalability and maintainability. However, a standard specific definition of MSA remains elusive due to its composition being contingent on specific business logic and varying business scenario requirements. These differing requirements inevitably lead to unique MSA patterns. This study aims to presents the cost-effective and effort-based prediction model for the most influential challenges of migration from monolithic to MSA using a nature-inspired optimization algorithm, i.e., genetic algorithm (GA). Moreover, future research directions are suggested in the realm of microservices architecture.},
	issn={1433-7479},
	doi={10.1007/s00500-023-09336-w},
	url={https://doi.org/10.1007/s00500-023-09336-w}
}

@Comment{jabref-meta: databaseType:biblatex;}
