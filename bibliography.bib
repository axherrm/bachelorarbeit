% Encoding: UTF-8

%%%
%
%Beim Erstellen der Bibtex-Datei wird empfohlen darauf zu achten, dass die DOI aufgeführt wird.
%
%%%

@inproceedings{Fritzsch_2019,
  doi = {10.1109/icsme.2019.00081},
  url = {https://doi.org/10.1109%2Ficsme.2019.00081},
  year = 2019,
  month = {sep},
  publisher = {{IEEE}},
  author = {Jonas Fritzsch and Justus Bogner and Stefan Wagner and Alfred Zimmermann},
  title = {Microservices Migration in Industry: Intentions, Strategies, and Challenges},
  booktitle = {2019 {IEEE} International Conference on Software Maintenance and Evolution ({ICSME})}
}

@InProceedings{10.1007/978-3-030-06019-0_10,
	author="Fritzsch, Jonas
	and Bogner, Justus
	and Zimmermann, Alfred
	and Wagner, Stefan",
	editor="Bruel, Jean-Michel
	and Mazzara, Manuel
	and Meyer, Bertrand",
	title="From Monolith to Microservices: A Classification of Refactoring Approaches",
	booktitle="Software Engineering Aspects of Continuous Development and New Paradigms of Software Production and Deployment",
	year="2019",
	publisher="Springer International Publishing",
	address="Cham",
	pages="128--141",
	abstract="While the recently emerged Microservices architectural style is widely discussed in literature, it is difficult to find clear guidance on the process of refactoring legacy applications. The importance of the topic is underpinned by high costs and effort of a refactoring process which has several other implications, e.g. overall processes (DevOps) and team structure. Software architects facing this challenge are in need of selecting an appropriate strategy and refactoring technique. One of the most discussed aspects in this context is finding the right service granularity to fully leverage the advantages of a Microservices architecture. This study first discusses the notion of architectural refactoring and subsequently compares 10 existing refactoring approaches recently proposed in academic literature. The approaches are classified by the underlying decomposition technique and visually presented in the form of a decision guide for quick reference. The review yielded a variety of strategies to break down a monolithic application into independent services. With one exception, most approaches are only applicable under certain conditions. Further concerns are the significant amount of input data some approaches require as well as limited or prototypical tool support.",
	isbn="978-3-030-06019-0"
}


@misc{fritzsch2022architecturecentric,
  title={Towards an Architecture-centric Methodology for Migrating to Microservices},
  author={Jonas Fritzsch and Justus Bogner and Markus Haug and Stefan Wagner and Alfred Zimmermann},
  year={2022},
  eprint={2207.00507},
  archivePrefix={arXiv},
  primaryClass={cs.SE}
}

@article{https://doi.org/10.1002/spe.2974,
	author = {Soldani, Jacopo and Muntoni, Giuseppe and Neri, Davide and Brogi, Antonio},
	title = {The μTOSCA toolchain: Mining, analyzing, and refactoring microservice-based architectures},
	journal = {Software: Practice and Experience},
	volume = {51},
	number = {7},
	pages = {1591-1621},
	keywords = {architectural smells, microservices, refactoring, software architecture mining},
	doi = {https://doi.org/10.1002/spe.2974},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.2974},
	eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.2974},
	abstract = {Summary Exploiting microservices to architect enterprise applications is becoming commonplace. This makes it crucial to provide some support for designing and analyzing microservice-based applications, for example, for understanding whether a microservice-based application adheres to the main design principles of microservices and for choosing how to refactor it when this is not the case. To provide such support, in this article we present the TOSCA toolchain. More precisely, we first introduce the TOSCA model to represent the architecture of microservice-based applications with the OASIS standard TOSCA. We then describe a technique to automatically mine the architecture of a microservice-based application and represent it with TOSCA, given the Kubernetes deployment of the application. We also present a methodology to analyze the TOSCA representation of a microservice-based architecture to systematically identify the architectural smells potentially affecting the corresponding application and to resolve them. Finally, we present two prototype tools, Miner and Freshener, implementing our mining solution and the support for identifying and resolving architectural smells in microservice-based applications, respectively. We then assess —by discussing some case studies— how effectively Miner, Freshener, and the TOSCA toolchain can support researchers and practitioners working with microservices.},
	year = {2021}
}

@Misc{master-daniel-koch,
  author      = {Daniel Koch},
  title       = {Migrating Monolithic Architecturesto Microservices: A Study onSoftware Quality Attributes},
  doi         = {10.18419/opus-12676},
  institution = {Institute of Software Engineering, University of Stuttgart},
  year        = {2022},
}

@Misc{master-tobias-haller,
  author      = {Tobias Haller},
  date        = {2022},
  title       = {Design, Implementation and Evaluation of an Application for Guiding Architectural Refactoring to Microservices},
  doi         = {10.18419/opus-12272},
  institution = {Institute of Software Engineering, University of Stuttgart},
}

@Misc{arh-github,
  author = {Jonas Fritzsch and Tobias Haller and Daniel Koch},
  date   = {2022},
  title  = {GitHub repository of the Architecture Refactoring Helper},
  url    = {https://github.com/jfr609/architecture-refactoring-helper},
}

@ARTICLE{a-survey-on,
  author={Velepucha, Victor and Flores, Pamela},
  journal={IEEE Access},
  title={A Survey on Microservices Architecture: Principles, Patterns and Migration Challenges},
  year={2023},
  volume={11},
  number={},
  pages={88339-88358},
  abstract={Microservices architecture is a new trend embraced by many organizations as a way to modernize their legacy applications. However, although there is work related to the migration process, there is a gap in the body of knowledge related to the principles they should adopt when implementing a microservices architecture. This work presents a comprehensive survey, gathering literature that explores the fundamental principles underlying the object-oriented approach and how these concepts are related to monolithic and microservices architectures. In addition, our research encompasses both monolithic architectures and microservices, along with an investigation into the design patterns and principles utilized within microservices. Our contribution is present a list of patterns used in microservices architecture, the comparation between the principles expounded by the experts in the decomposition of microservices architectures, Martin Fowler and Sam Neuman, and the forerunner of the Principle of Information Hiding, David Parnas, who discusses modularization as a mechanism to improve flexibility and understanding of a system. Additionally, we expose the advantages and disadvantages of monolithic and microservices architectures obtained from the literature review carried out in summary form, which can help as a reference for researchers from academia and industry and finally reveal the trends of microservices architectures today.},
  keywords={},
  doi={10.1109/ACCESS.2023.3305687},
  ISSN={2169-3536},
  month={},
}

@article{SVAHNBERG20071893,
  title = {Six years of evaluating software architectures in student projects},
  journal = {Journal of Systems and Software},
  volume = {80},
  number = {11},
  pages = {1893-1901},
  year = {2007},
  issn = {0164-1212},
  doi = {https://doi.org/10.1016/j.jss.2007.01.050},
  url = {https://www.sciencedirect.com/science/article/pii/S016412120700060X},
  author = {Mikael Svahnberg and Frans Mårtensson},
  keywords = {Software architecture, Software architecture evaluation, Education},
  abstract = {Software architecture evaluations are an important decision support tool when developing software systems. It is thus important that they are conducted professionally and that the results are of high quality. In order to improve the quality, it is necessary for the participants to gain experience in conducting software architecture evaluations. In this article we present guidelines based on six years of experience in software architecture evaluations. Although we primarily focus on our experiences on software architecture evaluation in student projects, we have also applied the same method in industry with similar experiences.}
}

@techreport{kazman_2000,
  author={Kazman, Rick and Klein, Mark and Clements, Paul},
  title={ATAM: Method for Architecture Evaluation},
  month={Aug},
  year={2000},
  number={CMU/SEI-2000-TR-004},
  howpublished={Carnegie Mellon University, Software Engineering Institute's Digital Library},
  url={https://insights.sei.cmu.edu/library/atam-method-for-architecture-evaluation/},
  note={Accessed: 2023-Oct-16}
}

@Book{saam,
  author    = {Len Bass and Paul Clements and Rick Kazman},
  date      = {1998},
  title     = {Software architecture in practice},
  publisher = {Addison-Wesley Publishing Co.},
}

@incollection{seaman2008qualitative,
  title={Qualitative methods},
  author={Seaman, Carolyn B},
  booktitle={Guide to advanced empirical software engineering},
  pages={35--62},
  year={2008},
  publisher={Springer}
}

@INPROCEEDINGS{Fil2023,
  author={Filippone, Gianluca and Qaisar Mehmood, Nadeem and Autili, Marco and Rossi, Fabrizio and Tivoli, Massimo},
  booktitle={2023 IEEE 20th International Conference on Software Architecture (ICSA)},
  title={From monolithic to microservice architecture: an automated approach based on graph clustering and combinatorial optimization},
  year={2023},
  volume={},
  number={},
  pages={47-57},
  doi={10.1109/ICSA56044.2023.00013}
}

@INPROCEEDINGS{PF4MD,
	author={Li, Yulong and Li, Zhi and Bu, Yitao and Xiao, Hongbin and Deng, Yajun},
	booktitle={2023 IEEE 31st International Requirements Engineering Conference (RE)},
	title={PF4MD: A Microservice Decomposition Tool Combining Problem Frames},
	year={2023},
	volume={},
	number={},
	pages={359-360},
	doi={10.1109/RE57278.2023.00051}
}

@book{problem-frames,
	month = {December},
	title = {Problem Frames: Analysing and Structuring Software Development Problems},
	author = {Michael Jackson},
	address = {New York},
	publisher = {Addison-Wesley},
	year = {2001},
	url = {https://oro.open.ac.uk/7513/},
	abstract = {It is tempting when approaching a software development problem to rush headlong into the trap of thinking too soon about the solution. Software development problems are about the world outside the computer {--} the real environment in which the system must have its effect {--} and demand consideration of the surrounding characteristics, relationships and context. Problem frames are a tool for classifying, analyzing and structuring such software development problems. Whereas object oriented patterns are primarily concerned with solutions, problem frames focus on the problem itself, enabling you to understand and address it clearly and directly.}
}

@Inbook{Dragoni2017,
	author="Dragoni, Nicola
	and Giallorenzo, Saverio
	and Lafuente, Alberto Lluch
	and Mazzara, Manuel
	and Montesi, Fabrizio
	and Mustafin, Ruslan
	and Safina, Larisa",
	editor="Mazzara, Manuel
	and Meyer, Bertrand",
	title="Microservices: Yesterday, Today, and Tomorrow",
	bookTitle="Present and Ulterior Software Engineering",
	year="2017",
	publisher="Springer International Publishing",
	address="Cham",
	pages="195--216",
	abstract="Microservices is an architectural style inspired by service-oriented computing that has recently started gaining popularity. Before presenting the current state of the art in the field, this chapter reviews the history of software architecture, the reasons that led to the diffusion of objects and services first, and microservices later. Finally, open problems and future challenges are introduced. This survey primarily addresses newcomers to the discipline, while offering an academic viewpoint on the topic. In addition, we investigate some practical issues and point out a few potential solutions.",
	isbn="978-3-319-67425-4",
	doi="10.1007/978-3-319-67425-4_12",
	url="https://doi.org/10.1007/978-3-319-67425-4_12"
}

@ARTICLE{7742218,
	author={Singleton, Andy},
	journal={IEEE Cloud Computing},
	title={The Economics of Microservices},
	year={2016},
	volume={3},
	number={5},
	pages={16-20},
	doi={10.1109/MCC.2016.109}
}

@misc{taibi2019decomposition,
	title={A Decomposition and Metric-Based Evaluation Framework for Microservices}, 
	author={Davide Taibi and Kari Systä},
	year={2019},
	eprint={1908.08513},
	archivePrefix={arXiv},
	primaryClass={cs.SE}
}

@Article{taibi2019monolithic,
  author    = {Taibi, Davide and Syst{\"a}, Kari},
  title     = {From monolithic systems to microservices: A decomposition framework based on process mining},
  doi       = {10.5220/0007755901530164},
  publisher = {SciTePress},
  year      = {2019},
}

@ARTICLE{taibi2017processmotivations,
	author={Taibi, Davide and Lenarduzzi, Valentina and Pahl, Claus},
	journal={IEEE Cloud Computing}, 
	title={Processes, Motivations, and Issues for Migrating to Microservices Architectures: An Empirical Investigation}, 
	year={2017},
	volume={4},
	number={5},
	pages={22-32},
	doi={10.1109/MCC.2017.4250931}
}

@inproceedings{on-a-metaprocess,
	author = {Medeiros, Henrique and Batista, Thais and Cavalcante, Everton},
	title = {On a Metaprocess for Microservice Migration},
	year = {2023},
	isbn = {9798400707872},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3613372.3613382},
	doi = {10.1145/3613372.3613382},
	abstract = {Microservice-based architectures have become popular to manage the complexity of many cloud service-oriented systems and comply with availability, maintainability, and scalability requirements. Modernizing legacy systems to adopt microservices is time-consuming and has often been ad-hoc. One of the main issues is the lack of an understanding of which activities and artifacts should be considered when migrating applications to microservices, besides how to realize a well-defined process to achieve the expected benefits. This paper introduces the Metaprocess for Microservice Migration Kernel (M3K) to support migrating monolithic applications to microservice architectures. The core idea is defining a general-purpose metaprocess that development teams and organizations could use as a basis for defining their specific microservice migration processes. M3K relies on OMG Essence Standard as a well-founded common ground for establishing software development practices, activities, and work products and tracking the migration to microservices.},
	booktitle = {Proceedings of the XXXVII Brazilian Symposium on Software Engineering},
	pages = {116–121},
	numpages = {6},
	keywords = {migration, software modernization, legacy systems, Microservices, metaprocess},
	location = {Campo Grande, Brazil},
	series = {SBES '23}
}

@INPROCEEDINGS{muP-a-dev-framework,
	author={Garbi, Giulio and Incerto, Emilio and Tribastone, Mirco},
	booktitle={2023 IEEE 16th International Conference on Cloud Computing (CLOUD)}, 
	title={μP: A Development Framework for Predicting Performance of Microservices by Design}, 
	year={2023},
	volume={},
	number={},
	pages={178-188},
	doi={10.1109/CLOUD60044.2023.00029}
}

@Misc{essence-kernel-omg,
  author       = {OMG},
  date         = {2018},
  title        = {Essence – Kernel and Language for Software Engineering Methods, Version 1.2},
  organization = {OMG, USA},
  url          = {https://www.omg.org/spec/Essence/1.2/About-Essence},
}

@article{software-architectural-migration-2021,
	author = {Chondamrongkul, Nacha and Sun, Jing and Warren, Ian},
	title = {Software Architectural Migration: An Automated Planning Approach},
	year = {2021},
	issue_date = {October 2021},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {30},
	number = {4},
	issn = {1049-331X},
	url = {https://doi.org/10.1145/3461011},
	doi = {10.1145/3461011},
	abstract = {Software architectural designs are usually changed over time to support emerging technologies and to adhere to new principles. Architectural migration is an important activity that helps to transform the architectural styles applied during a system’s design with the result of modernising the system. If not performed correctly, this process could lead to potential system failures. This article presents an automated approach to refactoring architectural design and to planning the evolution process. With our solution, the architectural design can be refactored, ensuring that system functionality is preserved. Furthermore, the architectural migration process allows the system to be safely and incrementally transformed. We have evaluated our approach with five real-world software applications. The results prove the effectiveness of our approach and identify factors that impact the performance of architectural verification and migration planning. An interesting finding is that planning algorithms generate migration plans that differ in term of their relative efficiency.},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	month = {jul},
	articleno = {50},
	numpages = {35},
	keywords = {architectural migration, Blockchain, microservice, software modernisation, Software architecture}
}

@INPROCEEDINGS{architect:a-framework,
	author={Volynsky, Evgeny and Mehmed, Merlin and Krusche, Stephan},
	booktitle={2022 International Conference on Computing, Electronics & Communications Engineering (iCCECE)}, 
	title={Architect: A Framework for the Migration to Microservices}, 
	year={2022},
	volume={},
	number={},
	pages={71-76},
	doi={10.1109/iCCECE55162.2022.9875096}
}


@Comment{jabref-meta: databaseType:biblatex;}
